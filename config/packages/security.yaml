security:
    password_hashers:
        App\Entity\User:
            algorithm: sha512
            iterations: 5000
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # in_memory: { memory: ~ }
        our_db_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/webservices/
            stateless: true
            # anonymous: true
            provider: our_db_provider
            jwt:
                authenticator: app.custom_authenticator
        main:
            pattern:    ^/
            http_basic: ~
            provider: our_db_provider
            # anonymous: ~
            form_login:
                enable_csrf: true
                login_path: app_user_login
                check_path: app_user_login
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
            logout:
                path:   app_user_logout
                target: /
            # activate different ways to authenticate
            json_login:
                check_path: /authentication_token
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            entry_point: form_login
            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
         # - { path: ^/webservices/login, roles: PUBLIC_ACCESS }
         # - { path: ^/webservices,       roles: IS_AUTHENTICATED_FULLY }